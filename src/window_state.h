// This file is auto generated by table_compiler
#include "icydb.h"
typedef struct _window_state{
  char ** column_names;
  char ** column_types;
  size_t count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const icy_control * k1, const icy_control * k2);
  const size_t sizes[5];

  icy_control * key;
  int * width;
  int * height;
  int * x;
  int * y;
  icy_mem * key_area;
  icy_mem * width_area;
  icy_mem * height_area;
  icy_mem * x_area;
  icy_mem * y_area;
}window_state;

window_state * window_state_create(const char * optional_name);
void window_state_set(window_state * table, icy_control key, int width, int height, int x, int y);
void window_state_insert(window_state * table, icy_control * key, int * width, int * height, int * x, int * y, size_t count);
void window_state_lookup(window_state * table, icy_control * keys, size_t * out_indexes, size_t count);
void window_state_remove(window_state * table, icy_control * keys, size_t key_count);
void window_state_clear(window_state * table);
void window_state_unset(window_state * table, icy_control key);
bool window_state_try_get(window_state * table, icy_control * key, int * width, int * height, int * x, int * y);
void window_state_print(window_state * table);
size_t window_state_iter(window_state * table, icy_control * keys, size_t keycnt, icy_control * optional_keys_out, size_t * indexes, size_t cnt, size_t * iterator);
