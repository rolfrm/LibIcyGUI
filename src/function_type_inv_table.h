// This file is auto generated by icy-table.
#include "icydb.h"
typedef struct _function_type_inv_table{
  char ** column_names;
  char ** column_types;
  size_t count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const icy_control * k1, const icy_control * k2);
  const size_t sizes[2];

  icy_control * key;
  function_type * value;
  icy_mem * key_area;
  icy_mem * value_area;
}function_type_inv_table;

function_type_inv_table * function_type_inv_table_create(const char * optional_name);
void function_type_inv_table_set(function_type_inv_table * table, icy_control key, function_type value);
void function_type_inv_table_insert(function_type_inv_table * table, icy_control * key, function_type * value, size_t count);
void function_type_inv_table_lookup(function_type_inv_table * table, icy_control * keys, size_t * out_indexes, size_t count);
void function_type_inv_table_remove(function_type_inv_table * table, icy_control * keys, size_t key_count);
void function_type_inv_table_clear(function_type_inv_table * table);
void function_type_inv_table_unset(function_type_inv_table * table, icy_control key);
bool function_type_inv_table_try_get(function_type_inv_table * table, icy_control * key, function_type * value);
void function_type_inv_table_print(function_type_inv_table * table);
size_t function_type_inv_table_iter(function_type_inv_table * table, icy_control * keys, size_t keycnt, icy_control * optional_keys_out, size_t * indexes, size_t cnt, size_t * iterator);
